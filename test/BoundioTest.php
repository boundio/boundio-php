<?php

require_once dirname(__FILE__). '/../Boundio.php';

/**
 * Test class for Boundio.
 * Generated by PHPUnit on 2012-03-14 at 19:16:10.
 */
class BoundioTest extends PHPUnit_Framework_TestCase
{
	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		/*
		Boundio::configure('userSerialId', '');
		Boundio::configure('appId', '');
		Boundio::configure('authKey', '');
		*/
	}

	public function testCall()
	{
		// Validation Error
		// phone number
		$this->assertEquals(false, Boundio::call('1234', array()));
		$this->assertEquals(false, Boundio::call('test', array()));
		
		// casts
		$this->assertEquals(false, Boundio::call('0123456789', array('file(000001)', 'silent()', 'num(0)', 'test')));
		
		// create mock to be fake api call function
		$mock = $this->getMock('Boundio', array('_execute'));
		$mock::staticExpects($this->any())
			->method('_execute')
			->will($this->returnValue('{"success":"true","_id":"1234"}'));
		
		// call success
		$this->assertEquals(array('success' => "true", '_id' => '1234'), $mock::call('0123456789', array('file(000001)')));
	}

	public function testStatus()
	{
		
		// create mock to be fake api call function
		$mock = $this->getMock('Boundio', array('_execute'));
		$mock::staticExpects($this->any())
			->method('_execute')
			->will($this->returnValue('{"success":"true","result":[{"_id":"2845","_from":"0123456789","_to":"0234567890","_start":"2012-03-16 12:19","_end":"2012-03-16 12:19","_duration":"27","_status":"架電完了"}]}'));
		
		// status success select all
		$this->assertEquals(array(
			'success' => "true",
			"result" => array(array(
				"_id" => "2845",
				"_from" => "0123456789",
				"_to" => "0234567890",
				"_start" => "2012-03-16 12:19",
				"_end" => "2012-03-16 12:19",
				"_duration" => "27",
				"_status" => "架電完了")
			)), $mock::status());
		
		
	}
	
	public function testStatusDate()
	{
		$mock = $this->getMock('Boundio', array('_execute'));
		// create fake api call function
		$mock::staticExpects($this->any())
			->method('_execute')
			->will($this->returnValue('{"success":"true","result":[{"_id":"2845","_from":"0123456789","_to":"0234567890","_start":"2012-03-16 12:19","_end":"2012-03-16 12:19","_duration":"27","_status":"架電完了"},{"_id":"2846","_from":"0123456789","_to":"0234567890","_start":"2012-03-16 12:20","_end":"2012-03-16 12:21","_duration":"27","_status":"架電完了"}]}'));
		
		// status success select date
		$this->assertEquals(array(
			'success' => "true",
			"result" => array(array(
				"_id" => "2845",
				"_from" => "0123456789",
				"_to" => "0234567890",
				"_start" => "2012-03-16 12:19",
				"_end" => "2012-03-16 12:19",
				"_duration" => "27",
				"_status" => "架電完了"
			),array(
				"_id" => "2846",
				"_from" => "0123456789",
				"_to" => "0234567890",
				"_start" => "2012-03-16 12:20",
				"_end" => "2012-03-16 12:21",
				"_duration" => "27",
				"_status" => "架電完了")
		)), $mock::status('', '2012-03-16'));
	}

	/**
	 * @todo Implement testFile().
	 */
	public function testFileTextConvert()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
		  'This test has not been implemented yet.'
		);
	}
	
	/**
	 * @todo Implement testFile().
	 */
	public function testFileUpload()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
		  'This test has not been implemented yet.'
		);
	}
}
?>
